# -*- coding: utf-8 -*-
"""ML Lab3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1w1BhHgAnHd0nrxRLHaZxL9PHGKRUwQz5

Exercise 1: Discover Your Dataset
"""

import pandas as pd

"""Step 1: Loading Data"""

# save filepath to variable for easier access
melbourne_file_path = '../input/melbourne-housing-snapshot/melb_data.csv'
# read the data and store data in DataFrame titled melbourne_data
melbourne_data = pd.read_csv(melbourne_file_path)
# print a summary of the data in Melbourne data
melbourne_data.describe()

# Set up code checking
from learntools.core import binder
binder.bind(globals())
from learntools.machine_learning.ex2 import *
print("Setup Complete")

import pandas as pd

# Path of the file to read
iowa_file_path = '../input/home-data-for-ml-course/train.csv'

# Fill in the line below to read the file into a variable home_data
home_data = pd.read_csv(iowa_file_path)

# Call line below with no argument to check that you've loaded the data correctly
step_1.check()

"""Step 2: Review The Data"""

# Print summary statistics in next line
home_df = pd.DataFrame(home_data)
home_df.describe()

home_df['YearBuilt'].head()

from datetime import datetime

# What is the average lot size (rounded to nearest integer)?
avg_lot_size = round(home_df['LotArea'].mean())

# As of today, how old is the newest home (current year - the date in which it was built)
newest_home_age = datetime.now().year - home_df['YearBuilt'].max()

# Checks your answers
step_2.check()

"""Exercise 2: Your First Machine Learning Model"""

# Code you have previously used to load data
import pandas as pd

# Path of the file to read
iowa_file_path = '../input/home-data-for-ml-course/train.csv'

home_data = pd.read_csv(iowa_file_path)

# Set up code checking
from learntools.core import binder
binder.bind(globals())
from learntools.machine_learning.ex3 import *

print("Setup Complete")

"""Exercises
Step 1: Specify Prediction Target
"""

# print the list of columns in the dataset to find the name of the prediction target
home_data.columns

y = home_data.SalePrice

# Check your answer
step_1.check()

"""Step 2: Create X"""

# Create the list of features below
feature_names = ['LotArea',
'YearBuilt',
'1stFlrSF',
'2ndFlrSF',
'FullBath',
'BedroomAbvGr',
'TotRmsAbvGrd']

# Select data corresponding to features in feature_names
X = home_data[feature_names]

# Check your answer
step_2.check()

"""Review Data"""

# Review data
# print description or statistics from X
#print(_)
X.describe()

# print the top few lines
#print(_)
X.head()

"""Step 3: Specify and Fit Model"""

# from _ import _
from sklearn.tree import DecisionTreeRegressor
#specify the model.
#For model reproducibility, set a numeric value for random_state when specifying the model
iowa_model = DecisionTreeRegressor(random_state = 1)

# Fit the model
iowa_model.fit(X,y)

# Check your answer
step_3.check()

"""Step 4: Make Predictions"""

predictions = iowa_model.predict(X)
print(predictions)

# Check your answer
step_4.check()

"""Think About Your Results"""

# You can write code in this cell
y.head()

"""Exercise 3: Model Validation

Recap
"""

# Code you have previously used to load data
import pandas as pd
from sklearn.tree import DecisionTreeRegressor

# Path of the file to read
iowa_file_path = '../input/home-data-for-ml-course/train.csv'

home_data = pd.read_csv(iowa_file_path)
y = home_data.SalePrice
feature_columns = ['LotArea', 'YearBuilt', '1stFlrSF', '2ndFlrSF', 'FullBath', 'BedroomAbvGr', 'TotRmsAbvGrd']
X = home_data[feature_columns]

# Specify Model
iowa_model = DecisionTreeRegressor()
# Fit Model
iowa_model.fit(X, y)

print("First in-sample predictions:", iowa_model.predict(X.head()))
print("Actual target values for those homes:", y.head().tolist())

# Set up code checking
from learntools.core import binder
binder.bind(globals())
from learntools.machine_learning.ex4 import *
print("Setup Complete")

"""Step 1: Split Your Data"""

# Import the train_test_split function and uncomment
from sklearn.model_selection import train_test_split

# fill in and uncomment
train_X, val_X, train_y, val_y = train_test_split(X,y,random_state = 1)

# Check your answer
step_1.check()

"""Step 2: Specify and Fit the Mode"""

# You imported DecisionTreeRegressor in your last exercise
# and that code has been copied to the setup code above. So, no need to
# import it again

# Specify the model
iowa_model = DecisionTreeRegressor(random_state=1)

# Fit iowa_model with the training data.
iowa_model.fit(train_X, train_y)

# Check your answer
step_2.check()

"""Step 3: Make Predictions with Validation data"""

# Predict with all validation observations
val_predictions = iowa_model.predict(val_X)

# Check your answer
step_3.check()

# print the top few validation predictions
print(val_predictions)
# print the top few actual prices from validation data
print(val_y[:5])

"""Step 4: Calculate the Mean Absolute Error in Validation Data"""

from sklearn.metrics import mean_absolute_error
val_mae = mean_absolute_error(val_y , val_predictions)

# uncomment following line to see the validation_mae
print(val_mae)

# Check your answer
step_4.check()